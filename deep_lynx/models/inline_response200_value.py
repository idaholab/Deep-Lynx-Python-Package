# coding: utf-8

"""
    DeepLynx

    The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. DeepLynx allows for an integrated platform during design and operations of mega projects. The DeepLynx Core API delivers a few main features. 1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format. 2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200Value(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'encrypted': 'bool',
        'authorized': 'bool',
        'custom_fields': 'list[InlineResponse200CustomFields]',
        'redirect_address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'encrypted': 'encrypted',
        'authorized': 'authorized',
        'custom_fields': 'custom_fields',
        'redirect_address': 'redirect_address'
    }

    def __init__(self, id=None, name=None, encrypted=None, authorized=None, custom_fields=None, redirect_address=None):  # noqa: E501
        """InlineResponse200Value - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._encrypted = None
        self._authorized = None
        self._custom_fields = None
        self._redirect_address = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if encrypted is not None:
            self.encrypted = encrypted
        if authorized is not None:
            self.authorized = authorized
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if redirect_address is not None:
            self.redirect_address = redirect_address

    @property
    def id(self):
        """Gets the id of this InlineResponse200Value.  # noqa: E501


        :return: The id of this InlineResponse200Value.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200Value.


        :param id: The id of this InlineResponse200Value.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse200Value.  # noqa: E501


        :return: The name of this InlineResponse200Value.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200Value.


        :param name: The name of this InlineResponse200Value.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def encrypted(self):
        """Gets the encrypted of this InlineResponse200Value.  # noqa: E501


        :return: The encrypted of this InlineResponse200Value.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this InlineResponse200Value.


        :param encrypted: The encrypted of this InlineResponse200Value.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def authorized(self):
        """Gets the authorized of this InlineResponse200Value.  # noqa: E501


        :return: The authorized of this InlineResponse200Value.  # noqa: E501
        :rtype: bool
        """
        return self._authorized

    @authorized.setter
    def authorized(self, authorized):
        """Sets the authorized of this InlineResponse200Value.


        :param authorized: The authorized of this InlineResponse200Value.  # noqa: E501
        :type: bool
        """

        self._authorized = authorized

    @property
    def custom_fields(self):
        """Gets the custom_fields of this InlineResponse200Value.  # noqa: E501


        :return: The custom_fields of this InlineResponse200Value.  # noqa: E501
        :rtype: list[InlineResponse200CustomFields]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this InlineResponse200Value.


        :param custom_fields: The custom_fields of this InlineResponse200Value.  # noqa: E501
        :type: list[InlineResponse200CustomFields]
        """

        self._custom_fields = custom_fields

    @property
    def redirect_address(self):
        """Gets the redirect_address of this InlineResponse200Value.  # noqa: E501


        :return: The redirect_address of this InlineResponse200Value.  # noqa: E501
        :rtype: str
        """
        return self._redirect_address

    @redirect_address.setter
    def redirect_address(self, redirect_address):
        """Sets the redirect_address of this InlineResponse200Value.


        :param redirect_address: The redirect_address of this InlineResponse200Value.  # noqa: E501
        :type: str
        """

        self._redirect_address = redirect_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200Value, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200Value):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
